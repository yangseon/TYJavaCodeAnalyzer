/* Generated By:JavaCC: Do not edit this line. GeneratedJavaParserConstants.java */
/*
 *
 * This file is part of Java 1.8 parser and Abstract Syntax Tree.
 *
 * Java 1.8 parser and Abstract Syntax Tree is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Java 1.8 parser and Abstract Syntax Tree.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.github.javaparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GeneratedJavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACE = 1;
  /** RegularExpression Id. */
  int WINDOWS_EOL = 2;
  /** RegularExpression Id. */
  int TAB = 3;
  /** RegularExpression Id. */
  int UNIX_EOL = 4;
  /** RegularExpression Id. */
  int OLD_MAC_EOL = 5;
  /** RegularExpression Id. */
  int FORM_FEED = 6;
  /** RegularExpression Id. */
  int NEXT_LINE = 7;
  /** RegularExpression Id. */
  int NON_BREAKING_SPACE = 8;
  /** RegularExpression Id. */
  int OGHAM_SPACE = 9;
  /** RegularExpression Id. */
  int MONGOLIAN_VOWEL_SEPARATOR = 10;
  /** RegularExpression Id. */
  int EN_QUAD = 11;
  /** RegularExpression Id. */
  int EM_QUAD = 12;
  /** RegularExpression Id. */
  int EN_SPACE = 13;
  /** RegularExpression Id. */
  int EM_SPACE = 14;
  /** RegularExpression Id. */
  int THREE_PER_EM_SPACE = 15;
  /** RegularExpression Id. */
  int FOUR_PER_EM_SPACE = 16;
  /** RegularExpression Id. */
  int SIX_PER_EM_SPACE = 17;
  /** RegularExpression Id. */
  int FIGURE_SPACE = 18;
  /** RegularExpression Id. */
  int PUNCTUATION_SPACE = 19;
  /** RegularExpression Id. */
  int THIN_SPACE = 20;
  /** RegularExpression Id. */
  int HAIR_SPACE = 21;
  /** RegularExpression Id. */
  int ZERO_WIDTH_SPACE = 22;
  /** RegularExpression Id. */
  int ZERO_WIDTH_NON_JOINER = 23;
  /** RegularExpression Id. */
  int ZERO_WIDTH_JOINER = 24;
  /** RegularExpression Id. */
  int LINE_SEPARATOR = 25;
  /** RegularExpression Id. */
  int PARAGRAPH_SEPARATOR = 26;
  /** RegularExpression Id. */
  int NARROW_NO_BREAK_SPACE = 27;
  /** RegularExpression Id. */
  int MEDIUM_MATHEMATICAL_SPACE = 28;
  /** RegularExpression Id. */
  int WORD_JOINER = 29;
  /** RegularExpression Id. */
  int IDEOGRAPHIC_SPACE = 30;
  /** RegularExpression Id. */
  int ZERO_WIDTH_NO_BREAK_SPACE = 31;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 32;
  /** RegularExpression Id. */
  int JAVA_DOC_COMMENT = 35;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 36;
  /** RegularExpression Id. */
  int ABSTRACT = 38;
  /** RegularExpression Id. */
  int ASSERT = 39;
  /** RegularExpression Id. */
  int BOOLEAN = 40;
  /** RegularExpression Id. */
  int BREAK = 41;
  /** RegularExpression Id. */
  int BYTE = 42;
  /** RegularExpression Id. */
  int CASE = 43;
  /** RegularExpression Id. */
  int CATCH = 44;
  /** RegularExpression Id. */
  int CHAR = 45;
  /** RegularExpression Id. */
  int CLASS = 46;
  /** RegularExpression Id. */
  int CONST = 47;
  /** RegularExpression Id. */
  int CONTINUE = 48;
  /** RegularExpression Id. */
  int _DEFAULT = 49;
  /** RegularExpression Id. */
  int DO = 50;
  /** RegularExpression Id. */
  int DOUBLE = 51;
  /** RegularExpression Id. */
  int ELSE = 52;
  /** RegularExpression Id. */
  int ENUM = 53;
  /** RegularExpression Id. */
  int EXTENDS = 54;
  /** RegularExpression Id. */
  int FALSE = 55;
  /** RegularExpression Id. */
  int FINAL = 56;
  /** RegularExpression Id. */
  int FINALLY = 57;
  /** RegularExpression Id. */
  int FLOAT = 58;
  /** RegularExpression Id. */
  int FOR = 59;
  /** RegularExpression Id. */
  int GOTO = 60;
  /** RegularExpression Id. */
  int IF = 61;
  /** RegularExpression Id. */
  int IMPLEMENTS = 62;
  /** RegularExpression Id. */
  int IMPORT = 63;
  /** RegularExpression Id. */
  int INSTANCEOF = 64;
  /** RegularExpression Id. */
  int INT = 65;
  /** RegularExpression Id. */
  int INTERFACE = 66;
  /** RegularExpression Id. */
  int LONG = 67;
  /** RegularExpression Id. */
  int NATIVE = 68;
  /** RegularExpression Id. */
  int NEW = 69;
  /** RegularExpression Id. */
  int NULL = 70;
  /** RegularExpression Id. */
  int PACKAGE = 71;
  /** RegularExpression Id. */
  int PRIVATE = 72;
  /** RegularExpression Id. */
  int PROTECTED = 73;
  /** RegularExpression Id. */
  int PUBLIC = 74;
  /** RegularExpression Id. */
  int RETURN = 75;
  /** RegularExpression Id. */
  int SHORT = 76;
  /** RegularExpression Id. */
  int STATIC = 77;
  /** RegularExpression Id. */
  int STRICTFP = 78;
  /** RegularExpression Id. */
  int SUPER = 79;
  /** RegularExpression Id. */
  int SWITCH = 80;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 81;
  /** RegularExpression Id. */
  int THIS = 82;
  /** RegularExpression Id. */
  int THROW = 83;
  /** RegularExpression Id. */
  int THROWS = 84;
  /** RegularExpression Id. */
  int TRANSIENT = 85;
  /** RegularExpression Id. */
  int TRUE = 86;
  /** RegularExpression Id. */
  int TRY = 87;
  /** RegularExpression Id. */
  int VOID = 88;
  /** RegularExpression Id. */
  int VOLATILE = 89;
  /** RegularExpression Id. */
  int WHILE = 90;
  /** RegularExpression Id. */
  int REQUIRES = 91;
  /** RegularExpression Id. */
  int TO = 92;
  /** RegularExpression Id. */
  int WITH = 93;
  /** RegularExpression Id. */
  int OPEN = 94;
  /** RegularExpression Id. */
  int OPENS = 95;
  /** RegularExpression Id. */
  int USES = 96;
  /** RegularExpression Id. */
  int MODULE = 97;
  /** RegularExpression Id. */
  int EXPORTS = 98;
  /** RegularExpression Id. */
  int PROVIDES = 99;
  /** RegularExpression Id. */
  int TRANSITIVE = 100;
  /** RegularExpression Id. */
  int LONG_LITERAL = 101;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 102;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 103;
  /** RegularExpression Id. */
  int HEX_LITERAL = 104;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 105;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 106;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 107;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 108;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 109;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 110;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 111;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 112;
  /** RegularExpression Id. */
  int STRING_LITERAL = 113;
  /** RegularExpression Id. */
  int IDENTIFIER = 114;
  /** RegularExpression Id. */
  int LETTER = 115;
  /** RegularExpression Id. */
  int PART_LETTER = 116;
  /** RegularExpression Id. */
  int LPAREN = 117;
  /** RegularExpression Id. */
  int RPAREN = 118;
  /** RegularExpression Id. */
  int LBRACE = 119;
  /** RegularExpression Id. */
  int RBRACE = 120;
  /** RegularExpression Id. */
  int LBRACKET = 121;
  /** RegularExpression Id. */
  int RBRACKET = 122;
  /** RegularExpression Id. */
  int SEMICOLON = 123;
  /** RegularExpression Id. */
  int COMMA = 124;
  /** RegularExpression Id. */
  int DOT = 125;
  /** RegularExpression Id. */
  int AT = 126;
  /** RegularExpression Id. */
  int ASSIGN = 127;
  /** RegularExpression Id. */
  int LT = 128;
  /** RegularExpression Id. */
  int BANG = 129;
  /** RegularExpression Id. */
  int TILDE = 130;
  /** RegularExpression Id. */
  int HOOK = 131;
  /** RegularExpression Id. */
  int COLON = 132;
  /** RegularExpression Id. */
  int EQ = 133;
  /** RegularExpression Id. */
  int LE = 134;
  /** RegularExpression Id. */
  int GE = 135;
  /** RegularExpression Id. */
  int NE = 136;
  /** RegularExpression Id. */
  int SC_OR = 137;
  /** RegularExpression Id. */
  int SC_AND = 138;
  /** RegularExpression Id. */
  int INCR = 139;
  /** RegularExpression Id. */
  int DECR = 140;
  /** RegularExpression Id. */
  int PLUS = 141;
  /** RegularExpression Id. */
  int MINUS = 142;
  /** RegularExpression Id. */
  int STAR = 143;
  /** RegularExpression Id. */
  int SLASH = 144;
  /** RegularExpression Id. */
  int BIT_AND = 145;
  /** RegularExpression Id. */
  int BIT_OR = 146;
  /** RegularExpression Id. */
  int XOR = 147;
  /** RegularExpression Id. */
  int REM = 148;
  /** RegularExpression Id. */
  int LSHIFT = 149;
  /** RegularExpression Id. */
  int PLUSASSIGN = 150;
  /** RegularExpression Id. */
  int MINUSASSIGN = 151;
  /** RegularExpression Id. */
  int STARASSIGN = 152;
  /** RegularExpression Id. */
  int SLASHASSIGN = 153;
  /** RegularExpression Id. */
  int ANDASSIGN = 154;
  /** RegularExpression Id. */
  int ORASSIGN = 155;
  /** RegularExpression Id. */
  int XORASSIGN = 156;
  /** RegularExpression Id. */
  int REMASSIGN = 157;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 158;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 159;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 160;
  /** RegularExpression Id. */
  int ELLIPSIS = 161;
  /** RegularExpression Id. */
  int ARROW = 162;
  /** RegularExpression Id. */
  int DOUBLECOLON = 163;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 164;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 165;
  /** RegularExpression Id. */
  int GT = 166;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_JAVA_DOC_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\\n\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\u0085\"",
    "\"\\u00a0\"",
    "\"\\u1680\"",
    "\"\\u180e\"",
    "\"\\u2000\"",
    "\"\\u2001\"",
    "\"\\u2002\"",
    "\"\\u2003\"",
    "\"\\u2004\"",
    "\"\\u2005\"",
    "\"\\u2006\"",
    "\"\\u2007\"",
    "\"\\u2008\"",
    "\"\\u2009\"",
    "\"\\u200a\"",
    "\"\\u200b\"",
    "\"\\u200c\"",
    "\"\\u200d\"",
    "\"\\u2028\"",
    "\"\\u2029\"",
    "\"\\u202f\"",
    "\"\\u205f\"",
    "\"\\u2060\"",
    "\"\\u3000\"",
    "\"\\ufeff\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 33>",
    "\"/*\"",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 37>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"requires\"",
    "\"to\"",
    "\"with\"",
    "\"open\"",
    "\"opens\"",
    "\"uses\"",
    "\"module\"",
    "\"exports\"",
    "\"provides\"",
    "\"transitive\"",
    "<LONG_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\"->\"",
    "\"::\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"\\u001a\"",
  };

}
